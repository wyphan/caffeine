var tipuesearch = {"pages":[{"title":" Caffeine ","text":"Caffeine Documentation Philosophy and Motivations Organization Warning Caffeine is early-stage developmental software with evolving interfaces and functionality. Documentation Welcome to the Caffeine documentation. FORD generates this documentation from inline comments, static analysis, and Markdown files.\nThe target audience for Caffeine is Fortran compiler developers.\nWith a fully Caffeinated compiler, Fortran programmers can produce parallel executable files from standard Fortran with no need to directly reference Caffeine or any lower-level communication software. Philosophy and Motivations Write as much of Caffeine as possible in Fortran: Writing the runtime library in the language of the users increases the likelihood of community contributions. Writing the runtime library in Fortran obviates the need to directly manipulate compiler descriptors throughout much of Caffeine and allows Caffeine's underlying C layer to receive the Fortran-standard CFI_cdesc_t desriptor, which imwill make it easier to support multiple compilers. Writing most of Caffeine in Fortran offers the potential exploiting Fortran's rich array syntax, concurrent loop iterations ( do concurrent ), pure procedures and related features. Currently, these play a role only in one place: C callbacks to user-provided, pure functions that can be invoked inside a do concurrent block during the execution of co_reduce . Define an interface that remains agnostic about the back-end communication library: Once multiple back ends are supported, Fortran developers would not have to rewrite or even recompile their programs in order to change back ends. Switching from GASNet-EX to MPI, for example, could become a link-time decision. Organization The tree below depicts a skeletal overview of Caffeine's directory structure. build/ - build directory created by running ./install.sh\n  |-- run-fpm.sh - shell script for rebuilding Caffeine or running examples or tests\n  |-- * - temporary build files\nexample/\n  |-- hello.f90 - a Caffeinated \"Hello, world!\" program\n  |-- support-test/ - programs invoked by the test suite\nsrc/\n  |-- caffeine_m.f90 - the Big Kahuna: one module that exports all Caffeine functionality\n  |-- caffeine/\n        |-- *_m.f90 - modules containing procedure interface bodies\n        |-- *_s.f90 - submodules containing procedure definitions\n        |-- *.c - thin C functions wrapping networking middleware\n        |-- *.h - corresponding C header files\n        |-- *_h_m.f90 - a Fortran translation of a C header file\n        |-- collective_subroutines/\n              |-- co_*_s.f90 - submodules containing procedure definitions\ntest/\n  |-- main.f90 - test suite driver created by make_vegetable_driver\n  |-- *_test.f90 - unit tests Developer Info Lawrence Berkeley National Laboratory A U.S. Department of Energy National Laboratory Managed by the University of California","tags":"home","loc":"index.html"},{"title":"caffeine_m.f90 – Caffeine","text":"This file depends on sourcefile~~caffeine_m.f90~~EfferentGraph sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~caffeine_m.f90->sourcefile~collective_subroutines_m.f90 sourcefile~image_enumeration_m.f90 image_enumeration_m.f90 sourcefile~caffeine_m.f90->sourcefile~image_enumeration_m.f90 sourcefile~caffeinate_decaffeinate_m.f90 caffeinate_decaffeinate_m.f90 sourcefile~caffeine_m.f90->sourcefile~caffeinate_decaffeinate_m.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~caffeine_m.f90->sourcefile~team_type_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~caffeine_m.f90->sourcefile~synchronization_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~caffeine_m.f90->sourcefile~program_termination_m.f90 sourcefile~image_enumeration_m.f90->sourcefile~team_type_m.f90 sourcefile~caffeinate_decaffeinate_m.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_m Source Code caffeine_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module caffeine_m use program_termination_m , only : caf_stop , caf_error_stop use image_enumeration_m , only : caf_this_image , caf_num_images use collective_subroutines_m , only : caf_co_sum , caf_co_max , caf_co_min , caf_co_reduce , caf_co_broadcast use caffeinate_decaffeinate_m , only : caf_caffeinate , caf_decaffeinate use team_type_m , only : caf_form_team , caf_change_team , caf_end_team , team_type use synchronization_m , only : caf_sync_all implicit none end module caffeine_m","tags":"","loc":"sourcefile/caffeine_m.f90.html"},{"title":"synchronization_s.f90 – Caffeine","text":"This file depends on sourcefile~~synchronization_s.f90~~EfferentGraph sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~synchronization_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~synchronization_s.f90->sourcefile~synchronization_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules sychronization_s Source Code synchronization_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( synchronization_m ) sychronization_s use caffeine_h_m , only : caf_c_sync_all implicit none contains module procedure caf_sync_all call caf_c_sync_all end procedure end submodule","tags":"","loc":"sourcefile/synchronization_s.f90.html"},{"title":"caffeinate_decaffeinate_m.f90 – Caffeine","text":"This file depends on sourcefile~~caffeinate_decaffeinate_m.f90~~EfferentGraph sourcefile~caffeinate_decaffeinate_m.f90 caffeinate_decaffeinate_m.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~caffeinate_decaffeinate_m.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~caffeinate_decaffeinate_m.f90~~AfferentGraph sourcefile~caffeinate_decaffeinate_m.f90 caffeinate_decaffeinate_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~caffeinate_decaffeinate_m.f90 sourcefile~caffeinate_decaffeinate_s.f90 caffeinate_decaffeinate_s.F90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~caffeinate_decaffeinate_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeinate_decaffeinate_m Source Code caffeinate_decaffeinate_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module caffeinate_decaffeinate_m use team_type_m , only : team_type implicit none private public :: caf_caffeinate , caf_decaffeinate , default_team type ( team_type ), target :: default_team interface module function caf_caffeinate () result ( exit_code ) implicit none integer exit_code end function module subroutine caf_decaffeinate ( exit_code ) implicit none integer , intent ( in ) :: exit_code end subroutine end interface end module caffeinate_decaffeinate_m","tags":"","loc":"sourcefile/caffeinate_decaffeinate_m.f90.html"},{"title":"collective_subroutines_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~collective_subroutines_m.f90~~AfferentGraph sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~collective_subroutines_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules collective_subroutines_m Source Code collective_subroutines_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module collective_subroutines_m use iso_c_binding , only : c_int32_t , c_int64_t , c_float , c_char , c_bool , c_funptr , c_double implicit none private public :: caf_co_sum public :: caf_co_max public :: caf_co_min public :: caf_co_reduce public :: caf_co_broadcast public :: c_int32_t_operation public :: c_int64_t_operation public :: c_float_operation public :: c_double_operation public :: c_bool_operation public :: c_char_operation public :: c_float_complex_operation public :: c_double_complex_operation abstract interface pure function c_int32_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int32_t implicit none integer ( c_int32_t ), intent ( in ) :: lhs , rhs integer ( c_int32_t ) lhs_op_rhs end function pure function c_int64_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int64_t implicit none integer ( c_int64_t ), intent ( in ) :: lhs , rhs integer ( c_int64_t ) lhs_op_rhs end function pure function c_float_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none real ( c_float ), intent ( in ) :: lhs , rhs real ( c_float ) lhs_op_rhs end function pure function c_double_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none real ( c_double ), intent ( in ) :: lhs , rhs real ( c_double ) lhs_op_rhs end function pure function c_bool_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_bool implicit none logical ( c_bool ), intent ( in ) :: lhs , rhs logical ( c_bool ) lhs_op_rhs end function pure function c_char_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_char implicit none character ( kind = c_char , len =* ), intent ( in ) :: lhs , rhs character ( kind = c_char , len = :), allocatable :: lhs_op_rhs end function pure function c_float_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none complex ( c_float ), intent ( in ) :: lhs , rhs complex ( c_float ) lhs_op_rhs end function pure function c_double_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none complex ( c_double ), intent ( in ) :: lhs , rhs complex ( c_double ) lhs_op_rhs end function end interface interface module subroutine caf_co_sum ( a , result_image , stat , errmsg ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer , intent ( in ), target , optional :: result_image integer , intent ( out ), target , optional :: stat character ( len =* ), intent ( inout ), target , optional :: errmsg end subroutine module subroutine caf_co_max ( a , result_image , stat , errmsg ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer , intent ( in ), optional , target :: result_image integer , intent ( out ), optional , target :: stat character ( len =* ), intent ( inout ), optional , target :: errmsg end subroutine module subroutine caf_co_min ( a , result_image , stat , errmsg ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer , intent ( in ), optional , target :: result_image integer , intent ( out ), optional , target :: stat character ( len =* ), intent ( inout ), optional , target :: errmsg end subroutine module subroutine caf_co_reduce ( a , operation , result_image , stat , errmsg ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) type ( c_funptr ), value :: operation integer , intent ( in ), optional , target :: result_image integer , intent ( out ), optional , target :: stat character ( len =* ), intent ( inout ), optional , target :: errmsg end subroutine module subroutine caf_co_broadcast ( a , source_image , stat , errmsg ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer , optional , intent ( in ) :: source_image integer , optional , intent ( out ), target :: stat character ( len =* ), intent ( inout ), optional , target :: errmsg end subroutine end interface end module","tags":"","loc":"sourcefile/collective_subroutines_m.f90.html"},{"title":"caffeine_h_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~caffeine_h_m.f90~~AfferentGraph sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~normal_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~image_enumeration_s.f90 image_enumeration_s.f90 sourcefile~image_enumeration_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~caffeinate_decaffeinate_s.f90 caffeinate_decaffeinate_s.F90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_h_m Source Code caffeine_h_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module caffeine_h_m ! Fortran module shadowing the caffeine.h header file use iso_c_binding , only : c_int , c_ptr , c_size_t , c_funptr , c_bool implicit none private public :: caf_c_caffeinate , caf_c_decaffeinate public :: caf_c_num_images , caf_c_this_image public :: caf_c_sync_all public :: caf_c_co_broadcast , caf_c_co_sum , caf_c_co_min , caf_c_co_max , caf_c_co_reduce public :: caf_c_same_cfi_type , caf_c_elem_len , caf_c_numeric_type , caf_c_is_f_string interface ! ________ Program initiation and finalization ___________ subroutine caf_c_caffeinate ( argc , argv ) bind ( C ) !! void c_caffeinate(int argc, char *argv[]); import c_int , c_ptr implicit none integer ( c_int ), value :: argc type ( c_ptr ) argv ( * ) end subroutine subroutine caf_c_decaffeinate ( exit_code ) bind ( C ) !! void c_decaffeinate(); import c_int implicit none integer ( c_int ), value :: exit_code end subroutine ! _________________ Image enumeration ____________________ pure function caf_c_this_image () bind ( C ) !! int caf_c_this_image(); import c_int implicit none integer ( c_int ) caf_c_this_image end function pure function caf_c_num_images () bind ( C ) !! int caf_c_num_images(); import c_int implicit none integer ( c_int ) caf_c_num_images end function ! __________________ Synchronization _____________________ subroutine caf_c_sync_all () bind ( C ) !! void caf_c_sync_all(); import c_int implicit none end subroutine ! ______________ Collective Subroutines __________________ subroutine caf_c_co_broadcast ( a , source_image , stat , Nelem ) bind ( C ) !! void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements); import c_int , c_ptr implicit none type ( * ) a (..) type ( c_ptr ), value :: stat integer ( c_int ), value :: source_image , Nelem end subroutine subroutine caf_c_co_reduce ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements , Coll_ReduceSub , client_data ) bind ( C ) !! void caf_c_co_reduce(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, int num_elements, gex_Coll_ReduceFn_t* user_op, void* client_data) import c_int , c_ptr , c_size_t , c_funptr implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg , client_data type ( c_funptr ), value :: Coll_ReduceSub integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_c_co_sum ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_sum(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_c_co_min ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_min(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_c_co_max ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_max(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine logical ( c_bool ) pure function caf_c_same_cfi_type ( a , b ) bind ( C ) !! bool caf_c_same_cfi_type(CFI_cdesc_t* a_desc, CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..), b (..) end function logical ( c_bool ) pure function caf_c_numeric_type ( a ) bind ( C ) !! bool caf_c_numeric_type(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function logical ( c_bool ) pure function caf_c_is_f_string ( a ) bind ( C ) !! bool caf_c_is_f_string(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function pure function caf_c_elem_len ( a ) result ( a_elem_len ) bind ( C ) !! size_t caf_c_elem_len(CFI_cdesc_t* a_desc); import c_size_t type ( * ), intent ( in ) :: a (..) integer ( c_size_t ), target :: a_elem_len end function end interface end module caffeine_h_m","tags":"","loc":"sourcefile/caffeine_h_m.f90.html"},{"title":"normal_termination_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~normal_termination_m.f90~~AfferentGraph sourcefile~normal_termination_m.f90 normal_termination_m.f90 sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~normal_termination_s.f90->sourcefile~normal_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules normal_termination_m Source Code normal_termination_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module normal_termination_m implicit none private public :: caf_stop interface caf_stop module subroutine caf_stop_integer ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status integer , intent ( in ), optional :: stop_code end subroutine module subroutine caf_stop_character ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code end subroutine end interface end module normal_termination_m","tags":"","loc":"sourcefile/normal_termination_m.f90.html"},{"title":"team_type_s.f90 – Caffeine","text":"This file depends on sourcefile~~team_type_s.f90~~EfferentGraph sourcefile~team_type_s.f90 team_type_s.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~team_type_s.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules team_type_s Source Code team_type_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( team_type_m ) team_type_s implicit none contains module procedure caf_change_team end procedure module procedure caf_end_team end procedure module procedure caf_form_team end procedure end submodule","tags":"","loc":"sourcefile/team_type_s.f90.html"},{"title":"synchronization_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~synchronization_m.f90~~AfferentGraph sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~synchronization_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~synchronization_m.f90 sourcefile~caffeinate_decaffeinate_s.f90 caffeinate_decaffeinate_s.F90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~synchronization_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules synchronization_m Source Code synchronization_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module synchronization_m implicit none private public :: caf_sync_all interface module subroutine caf_sync_all () end subroutine end interface end module synchronization_m","tags":"","loc":"sourcefile/synchronization_m.f90.html"},{"title":"program_termination_s.f90 – Caffeine","text":"This file depends on sourcefile~~program_termination_s.f90~~EfferentGraph sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~program_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~program_termination_s.f90->sourcefile~program_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules program_termination_s Source Code program_termination_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( program_termination_m ) program_termination_s use iso_fortran_env , only : output_unit , error_unit use iso_c_binding , only : c_int use caffeine_h_m , only : caf_c_decaffeinate implicit none contains module procedure caf_stop_integer sync all !write(output_unit, *) \"caf_stop: stop code '\", stop_code, \"'\" write ( output_unit , * ) stop_code flush output_unit if (. not . present ( stop_code )) call caf_c_decaffeinate ( exit_code = 0_c_int ) ! does not return call caf_c_decaffeinate ( stop_code ) end procedure module procedure caf_stop_character sync all write ( output_unit , * ) \"caf_stop: stop code '\" // stop_code // \"'\" flush output_unit call caf_c_decaffeinate ( exit_code = 0_c_int ) ! does not return end procedure module procedure caf_error_stop_character integer ( c_int ), parameter :: error_occured = 1 write ( error_unit , * ) stop_code flush error_unit call caf_error_stop_integer ( error_occured ) end procedure module procedure caf_error_stop_integer integer exit_code if (. not . present ( stop_code )) then call caf_c_decaffeinate ( exit_code = 1 ) else if ( stop_code == 0 ) then write ( error_unit ) stop_code flush error_unit exit_code = 1 else exit_code = stop_code end if call caf_c_decaffeinate ( exit_code ) ! does not return end procedure end submodule program_termination_s","tags":"","loc":"sourcefile/program_termination_s.f90.html"},{"title":"caffeinate_decaffeinate_s.F90 – Caffeine","text":"This file depends on sourcefile~~caffeinate_decaffeinate_s.f90~~EfferentGraph sourcefile~caffeinate_decaffeinate_s.f90 caffeinate_decaffeinate_s.F90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~synchronization_m.f90 sourcefile~caffeinate_decaffeinate_m.f90 caffeinate_decaffeinate_m.f90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~caffeinate_decaffeinate_m.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~caffeinate_decaffeinate_m.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules caffeinate_decaffeinate_s Source Code caffeinate_decaffeinate_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( caffeinate_decaffeinate_m ) caffeinate_decaffeinate_s use iso_c_binding , only : c_int , c_loc , c_char , c_null_char use synchronization_m , only : caf_sync_all use caffeine_h_m , only : caf_c_caffeinate , caf_c_decaffeinate implicit none contains module procedure caf_caffeinate integer i integer , parameter :: max_arg_len = 1024 associate ( argc => int ( command_argument_count (), c_int )) associate ( argv => [( c_loc ( c_interop_arg ( i )), i = 0 , argc )]) call caf_c_caffeinate ( argc , argv ) end associate end associate ! TODO: establish non-allocatable coarrays call caf_sync_all exit_code = 0 contains function c_interop_arg ( argnum ) result ( arg ) integer , intent ( in ) :: argnum integer arglen #ifndef __GFORTRAN__ character ( kind = c_char , len = max_arg_len ), target :: arg #else character ( kind = c_char , len = max_arg_len ), target :: targ ! work around gfortran bug character ( kind = c_char , len = max_arg_len ), pointer :: arg arg => targ #endif call get_command_argument ( argnum , arg , arglen ) if ( arglen + 1 > max_arg_len ) error stop \"maximum argument length exceeded\" arg ( arglen + 1 : arglen + 1 ) = c_null_char end function end procedure module procedure caf_decaffeinate call caf_c_decaffeinate ( exit_code ) end procedure end submodule caffeinate_decaffeinate_s","tags":"","loc":"sourcefile/caffeinate_decaffeinate_s.f90.html"},{"title":"image_enumeration_m.f90 – Caffeine","text":"This file depends on sourcefile~~image_enumeration_m.f90~~EfferentGraph sourcefile~image_enumeration_m.f90 image_enumeration_m.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~image_enumeration_m.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~image_enumeration_m.f90~~AfferentGraph sourcefile~image_enumeration_m.f90 image_enumeration_m.f90 sourcefile~image_enumeration_s.f90 image_enumeration_s.f90 sourcefile~image_enumeration_s.f90->sourcefile~image_enumeration_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~image_enumeration_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules image_enumeration_m Source Code image_enumeration_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module image_enumeration_m use team_type_m , only : team_type implicit none private public :: caf_num_images public :: caf_this_image interface caf_num_images module function num_images_team ( team ) result ( image_count ) implicit none type ( team_type ), intent ( in ), optional :: team integer image_count end function module function num_images_team_number ( team_number ) result ( image_count ) implicit none integer , intent ( in ) :: team_number integer image_count end function end interface interface caf_this_image module function this_image_team ( team ) result ( image_number ) implicit none type ( team_type ), intent ( in ), optional :: team integer image_number end function module function this_image_coarray_team ( coarray , team ) result ( image_number ) implicit none type ( team_type ), intent ( in ), optional :: team class ( * ), intent ( in ) :: coarray (..) integer image_number end function module function this_image_coarray_dim_team ( coarray , dim , team ) result ( image_number ) implicit none class ( * ), intent ( in ) :: coarray (..) integer , intent ( in ) :: dim type ( team_type ), intent ( in ), optional :: team integer image_number end function end interface end module image_enumeration_m","tags":"","loc":"sourcefile/image_enumeration_m.f90.html"},{"title":"team_type_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~team_type_m.f90~~AfferentGraph sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~team_type_m.f90 sourcefile~image_enumeration_m.f90 image_enumeration_m.f90 sourcefile~caffeine_m.f90->sourcefile~image_enumeration_m.f90 sourcefile~caffeinate_decaffeinate_m.f90 caffeinate_decaffeinate_m.f90 sourcefile~caffeine_m.f90->sourcefile~caffeinate_decaffeinate_m.f90 sourcefile~image_enumeration_m.f90->sourcefile~team_type_m.f90 sourcefile~caffeinate_decaffeinate_m.f90->sourcefile~team_type_m.f90 sourcefile~team_type_s.f90 team_type_s.f90 sourcefile~team_type_s.f90->sourcefile~team_type_m.f90 sourcefile~image_enumeration_s.f90 image_enumeration_s.f90 sourcefile~image_enumeration_s.f90->sourcefile~image_enumeration_m.f90 sourcefile~caffeinate_decaffeinate_s.f90 caffeinate_decaffeinate_s.F90 sourcefile~caffeinate_decaffeinate_s.f90->sourcefile~caffeinate_decaffeinate_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules team_type_m Source Code team_type_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module team_type_m implicit none private public :: team_type , caf_form_team , current_team , caf_end_team , caf_change_team type team_type end type type ( team_type ), pointer :: current_team => null () interface module subroutine caf_form_team ( num , team , new_index , stat , errmsg ) integer , intent ( in ) :: num type ( team_type ), intent ( out ) :: team integer , intent ( in ), optional :: new_index integer , intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg end subroutine module subroutine caf_change_team ( team ) type ( team_type ), target , intent ( in ) :: team end subroutine module subroutine caf_end_team () end subroutine end interface end module team_type_m","tags":"","loc":"sourcefile/team_type_m.f90.html"},{"title":"program_termination_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~program_termination_m.f90~~AfferentGraph sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~program_termination_m.f90 sourcefile~caffeine_m.f90 caffeine_m.f90 sourcefile~caffeine_m.f90->sourcefile~program_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules program_termination_m Source Code program_termination_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module program_termination_m implicit none private public :: caf_stop public :: caf_error_stop interface caf_stop module subroutine caf_stop_integer ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code end subroutine module subroutine caf_stop_character ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code end subroutine end interface interface caf_error_stop module subroutine caf_error_stop_integer ( stop_code ) !! stop all images and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code end subroutine module subroutine caf_error_stop_character ( stop_code ) !! stop all images and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code end subroutine end interface end module program_termination_m","tags":"","loc":"sourcefile/program_termination_m.f90.html"},{"title":"utilities_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~utilities_m.f90~~AfferentGraph sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~utilities_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~utilities_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~utilities_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~utilities_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules utilities_m Source Code utilities_m.f90 Source Code module utilities_m use iso_c_binding , only : c_ptr , c_null_ptr , c_int , c_loc implicit none public :: get_c_ptr , get_c_ptr_character , optional_value contains pure function get_c_ptr ( stat ) result ( ptr ) integer , intent ( in ), optional , target :: stat type ( c_ptr ) ptr if ( present ( stat )) then ptr = c_loc ( stat ) else ptr = c_null_ptr end if end function pure function get_c_ptr_character ( errmsg ) result ( ptr ) character ( len =* ), intent ( in ), optional , target :: errmsg type ( c_ptr ) ptr if ( present ( errmsg )) then ptr = c_loc ( errmsg ) else ptr = c_null_ptr end if end function pure function optional_value ( var ) result ( c_val ) integer , intent ( in ), optional :: var integer ( c_int ) c_val if ( present ( var )) then c_val = var else c_val = 0_c_int end if end function end module utilities_m","tags":"","loc":"sourcefile/utilities_m.f90.html"},{"title":"image_enumeration_s.f90 – Caffeine","text":"This file depends on sourcefile~~image_enumeration_s.f90~~EfferentGraph sourcefile~image_enumeration_s.f90 image_enumeration_s.f90 sourcefile~image_enumeration_m.f90 image_enumeration_m.f90 sourcefile~image_enumeration_s.f90->sourcefile~image_enumeration_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~image_enumeration_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~team_type_m.f90 team_type_m.f90 sourcefile~image_enumeration_m.f90->sourcefile~team_type_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules image_enumeration_s Source Code image_enumeration_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( image_enumeration_m ) image_enumeration_s use caffeine_h_m , only : caf_c_num_images , caf_c_this_image implicit none contains module procedure num_images_team image_count = caf_c_num_images () end procedure module procedure num_images_team_number end procedure module procedure this_image_team image_number = caf_c_this_image () end procedure module procedure this_image_coarray_team end procedure module procedure this_image_coarray_dim_team end procedure end submodule image_enumeration_s","tags":"","loc":"sourcefile/image_enumeration_s.f90.html"},{"title":"normal_termination_s.f90 – Caffeine","text":"This file depends on sourcefile~~normal_termination_s.f90~~EfferentGraph sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~normal_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~normal_termination_m.f90 normal_termination_m.f90 sourcefile~normal_termination_s.f90->sourcefile~normal_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules normal_termination_s Source Code normal_termination_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( normal_termination_m ) normal_termination_s use iso_fortran_env , only : output_unit use iso_c_binding , only : c_int use caffeine_h_m , only : caf_c_decaffeinate implicit none contains module procedure caf_stop_integer sync all write ( output_unit , * ) \"caf_stop: stop code '\" , stop_code , \"'\" flush output_unit if (. not . present ( stop_code )) call caf_c_decaffeinate ( exit_code = 0_c_int ) ! does not return call caf_c_decaffeinate ( stop_code ) end procedure module procedure caf_stop_character sync all write ( output_unit , * ) \"caf_stop: stop code '\" // stop_code // \"'\" flush output_unit call caf_c_decaffeinate ( exit_code = 0_c_int ) end procedure end submodule normal_termination_s","tags":"","loc":"sourcefile/normal_termination_s.f90.html"},{"title":"co_sum_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_sum_s.f90~~EfferentGraph sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_sum_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_sum_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_sum_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_sum_s Source Code co_sum_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_sum_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_c_co_sum implicit none contains module procedure caf_co_sum type ( c_ptr ) stat_c_ptr , errmsg_c_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_c_co_sum ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) errmsg = errmsg_f_ptr end procedure end submodule co_sum_s","tags":"","loc":"sourcefile/co_sum_s.f90.html"},{"title":"co_max_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_max_s.f90~~EfferentGraph sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_max_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_max_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_max_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_max_s Source Code co_max_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_max_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer , c_funloc , c_null_ptr use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_c_co_max , caf_c_same_cfi_type , caf_c_numeric_type , caf_c_is_f_string use assert_m , only : assert implicit none contains module procedure caf_co_max type ( c_ptr ) :: stat_c_ptr = c_null_ptr , errmsg_c_ptr = c_null_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr if ( caf_c_numeric_type ( a )) then stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_c_co_max ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) ! no need to do this for stat was passed by reference errmsg = errmsg_f_ptr ! copy the output back & truncate the null terminator else if ( caf_c_is_f_string ( a )) then call caf_co_reduce ( a , c_funloc ( reverse_alphabetize ), optional_value ( result_image ), stat , errmsg ) else error stop \"caf_co_max: unsupported type\" end if contains pure function reverse_alphabetize ( lhs , rhs ) result ( last_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: last_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"caf_co_max: LHS/RHS length match\" , lhs // \" , \" // rhs ) last_alphabetically = max ( lhs , rhs ) end function end procedure end submodule co_max_s","tags":"","loc":"sourcefile/co_max_s.f90.html"},{"title":"co_reduce_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_reduce_s.f90~~EfferentGraph sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_reduce_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_reduce_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_reduce_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_reduce_s Source Code co_reduce_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_reduce_s use iso_c_binding , only : & c_ptr , c_size_t , c_loc , c_null_ptr , c_funloc , c_associated , c_f_pointer , c_int , c_f_procpointer use assert_m , only : assert use intrinsic_array_m , only : intrinsic_array_t use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_c_co_reduce , caf_c_same_cfi_type , caf_c_elem_len , caf_c_is_f_string implicit none character ( kind = c_char , len = 5 ), parameter :: dummy = \"     \" contains module procedure caf_co_reduce type ( c_ptr ) :: stat_ptr = c_null_ptr , errmsg_ptr = c_null_ptr procedure ( c_int32_t_operation ), pointer :: int32_op => null () procedure ( c_int64_t_operation ), pointer :: int64_op => null () procedure ( c_float_operation ), pointer :: float_op => null () procedure ( c_double_operation ), pointer :: double_op => null () procedure ( c_bool_operation ), pointer :: bool_op => null () procedure ( c_char_operation ), pointer :: char_op => null () procedure ( c_float_complex_operation ), pointer :: float_complex_op => null () procedure ( c_double_complex_operation ), pointer :: double_complex_op => null () call assert ( c_associated ( operation ), \"caf_co_reduce: c_associated(operation)\" ) stat_ptr = get_c_ptr ( stat ) errmsg_ptr = get_c_ptr_character ( errmsg ) if ( caf_c_same_cfi_type ( a , 0 )) then call c_f_procpointer ( operation , int32_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int32_t ), c_null_ptr ) else if ( caf_c_same_cfi_type ( a , 0_c_int64_t )) then call c_f_procpointer ( operation , int64_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int64_t ), c_null_ptr ) else if ( caf_c_same_cfi_type ( a , 1._c_double )) then call c_f_procpointer ( operation , double_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double ), c_null_ptr ) else if ( caf_c_same_cfi_type ( a , 1._c_float )) then call c_f_procpointer ( operation , float_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float ), c_null_ptr ) else if ( caf_c_same_cfi_type ( a , . true . _ c_bool )) then call c_f_procpointer ( operation , bool_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_bool ), c_null_ptr ) else if ( caf_c_is_f_string ( a )) then block integer ( c_size_t ), target :: len_a len_a = caf_c_elem_len ( a ) call c_f_procpointer ( operation , char_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_char ), c_loc ( len_a )) end block else if ( caf_c_same_cfi_type ( a , ( 0._c_float , 0._c_float ))) then call c_f_procpointer ( operation , float_complex_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float_complex ), c_null_ptr ) else if ( caf_c_same_cfi_type ( a , ( 0._c_double , 0._c_double ))) then call c_f_procpointer ( operation , double_complex_op ) call caf_c_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double_complex ), c_null_ptr ) else error stop \"caf_co_reduce: unsupported type\" end if contains subroutine Coll_ReduceSub_c_int32_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int32_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int32_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int32_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_int64_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int64_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int64_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int64_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_double: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_dobule_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_bool ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data logical ( c_bool ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_bool: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = bool_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_char ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data character ( kind = c_char , len = :), allocatable , target :: prototype (:) character ( kind = c_char , len = :), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_int ), pointer :: arglen => null () associate ( c_associated_args => [ c_associated ( arg1 ), c_associated ( arg2_and_out ), c_associated ( cdata )]) call assert ( all ( c_associated_args ), \"Coll_ReduceSub_c_char: all(c_associated_args)\" , intrinsic_array_t ( c_associated_args )) end associate call c_f_pointer ( cdata , arglen ) allocate ( character ( kind = c_char , len = arglen ) :: prototype ( count )) lhs => prototype ! set string length rhs_and_result => prototype ! set string length call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) block integer ( c_size_t ) i do concurrent ( i = 1 : count ) rhs_and_result ( i ) = char_op ( lhs ( i ), rhs_and_result ( i )) end do end block end subroutine end procedure end submodule co_reduce_s","tags":"","loc":"sourcefile/co_reduce_s.f90.html"},{"title":"co_broadcast_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_broadcast_s.f90~~EfferentGraph sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_broadcast_s Source Code co_broadcast_s.f90 Source Code submodule ( collective_subroutines_m ) co_broadcast_s use iso_c_binding , only : c_ptr use utilities_m , only : get_c_ptr use caffeine_h_m , only : caf_c_co_broadcast implicit none contains module procedure caf_co_broadcast type ( c_ptr ) stat_ptr stat_ptr = get_c_ptr ( stat ) call caf_c_co_broadcast ( a , source_image , stat_ptr , product ( shape ( a ))) ! With a compliant Fortran 2018 compiler, pass in c_sizeof(a) as the final argument ! and eliminate the calculation of num_elements*sizeof(a) in caffeine.c. end procedure end submodule co_broadcast_s","tags":"","loc":"sourcefile/co_broadcast_s.f90.html"},{"title":"co_min_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_min_s.f90~~EfferentGraph sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_min_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_min_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_min_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_min_s Source Code co_min_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_min_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer , c_funloc , c_null_ptr use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_c_co_min , caf_c_same_cfi_type , caf_c_numeric_type , caf_c_is_f_string use assert_m , only : assert implicit none contains module procedure caf_co_min type ( c_ptr ) :: stat_c_ptr = c_null_ptr , errmsg_c_ptr = c_null_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr if ( caf_c_numeric_type ( a )) then stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_c_co_min ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) ! no need to do this for stat was passed by reference errmsg = errmsg_f_ptr ! copy the output back & truncate the null terminator else if ( caf_c_is_f_string ( a )) then call caf_co_reduce ( a , c_funloc ( alphabetize ), optional_value ( result_image ), stat , errmsg ) else error stop \"caf_co_min: unsupported type\" end if contains pure function alphabetize ( lhs , rhs ) result ( first_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: first_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"caf_co_min: LHS/RHS length match\" , lhs // \" , \" // rhs ) first_alphabetically = min ( lhs , rhs ) end function end procedure end submodule co_min_s","tags":"","loc":"sourcefile/co_min_s.f90.html"},{"title":"team_type – Caffeine ","text":"type, public :: team_type Contents None","tags":"","loc":"type/team_type.html"},{"title":"c_bool_operation – Caffeine","text":"abstract interface public pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool)","tags":"","loc":"interface/c_bool_operation.html"},{"title":"c_char_operation – Caffeine","text":"abstract interface public pure function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable","tags":"","loc":"interface/c_char_operation.html"},{"title":"c_double_complex_operation – Caffeine","text":"abstract interface public pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double)","tags":"","loc":"interface/c_double_complex_operation.html"},{"title":"c_double_operation – Caffeine","text":"abstract interface public pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double)","tags":"","loc":"interface/c_double_operation.html"},{"title":"c_float_complex_operation – Caffeine","text":"abstract interface public pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float)","tags":"","loc":"interface/c_float_complex_operation.html"},{"title":"c_float_operation – Caffeine","text":"abstract interface public pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float)","tags":"","loc":"interface/c_float_operation.html"},{"title":"c_int32_t_operation – Caffeine","text":"abstract interface public pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t)","tags":"","loc":"interface/c_int32_t_operation.html"},{"title":"c_int64_t_operation – Caffeine","text":"abstract interface public pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t)","tags":"","loc":"interface/c_int64_t_operation.html"},{"title":"caf_caffeinate – Caffeine","text":"interface Calls interface~~caf_caffeinate~~CallsGraph interface~caf_caffeinate caf_caffeinate proc~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate interface~caf_c_caffeinate caf_c_caffeinate proc~caf_caffeinate->interface~caf_c_caffeinate interface~caf_sync_all caf_sync_all proc~caf_caffeinate->interface~caf_sync_all proc~caf_sync_all caf_sync_all interface~caf_sync_all->proc~caf_sync_all interface~caf_c_sync_all caf_c_sync_all proc~caf_sync_all->interface~caf_c_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module function caf_caffeinate() result(exit_code) Implementation → Arguments None Return Value integer","tags":"","loc":"interface/caf_caffeinate.html"},{"title":"caf_decaffeinate – Caffeine","text":"interface Calls interface~~caf_decaffeinate~~CallsGraph interface~caf_decaffeinate caf_decaffeinate proc~caf_decaffeinate caf_decaffeinate interface~caf_decaffeinate->proc~caf_decaffeinate interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_decaffeinate->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_decaffeinate(exit_code) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: exit_code","tags":"","loc":"interface/caf_decaffeinate.html"},{"title":"caf_co_broadcast – Caffeine","text":"interface Calls interface~~caf_co_broadcast~~CallsGraph interface~caf_co_broadcast caf_co_broadcast proc~caf_co_broadcast caf_co_broadcast interface~caf_co_broadcast->proc~caf_co_broadcast proc~get_c_ptr get_c_ptr proc~caf_co_broadcast->proc~get_c_ptr interface~caf_c_co_broadcast caf_c_co_broadcast proc~caf_co_broadcast->interface~caf_c_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_co_broadcast(a, source_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional :: source_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"interface/caf_co_broadcast.html"},{"title":"caf_co_max – Caffeine","text":"interface Calls interface~~caf_co_max~~CallsGraph interface~caf_co_max caf_co_max proc~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max proc~get_c_ptr get_c_ptr proc~caf_co_max->proc~get_c_ptr interface~caf_c_numeric_type caf_c_numeric_type proc~caf_co_max->interface~caf_c_numeric_type proc~optional_value optional_value proc~caf_co_max->proc~optional_value interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_max->interface~caf_c_is_f_string interface~caf_c_co_max caf_c_co_max proc~caf_co_max->interface~caf_c_co_max proc~get_c_ptr_character get_c_ptr_character proc~caf_co_max->proc~get_c_ptr_character interface~caf_co_reduce caf_co_reduce proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr proc~caf_co_reduce->proc~optional_value proc~caf_co_reduce->interface~caf_c_is_f_string proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_co_max(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"interface/caf_co_max.html"},{"title":"caf_co_min – Caffeine","text":"interface Calls interface~~caf_co_min~~CallsGraph interface~caf_co_min caf_co_min proc~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min proc~get_c_ptr get_c_ptr proc~caf_co_min->proc~get_c_ptr interface~caf_c_numeric_type caf_c_numeric_type proc~caf_co_min->interface~caf_c_numeric_type proc~optional_value optional_value proc~caf_co_min->proc~optional_value interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_min->interface~caf_c_is_f_string interface~caf_c_co_min caf_c_co_min proc~caf_co_min->interface~caf_c_co_min proc~get_c_ptr_character get_c_ptr_character proc~caf_co_min->proc~get_c_ptr_character interface~caf_co_reduce caf_co_reduce proc~caf_co_min->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr proc~caf_co_reduce->proc~optional_value proc~caf_co_reduce->interface~caf_c_is_f_string proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_co_min(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"interface/caf_co_min.html"},{"title":"caf_co_reduce – Caffeine","text":"interface Calls interface~~caf_co_reduce~~CallsGraph interface~caf_co_reduce caf_co_reduce proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~get_c_ptr get_c_ptr proc~caf_co_reduce->proc~get_c_ptr interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert proc~optional_value optional_value proc~caf_co_reduce->proc~optional_value interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_reduce->interface~caf_c_is_f_string proc~get_c_ptr_character get_c_ptr_character proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~caf_co_reduce~~CalledByGraph interface~caf_co_reduce caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_co_reduce proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_co_reduce(a, operation, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"interface/caf_co_reduce.html"},{"title":"caf_co_sum – Caffeine","text":"interface Calls interface~~caf_co_sum~~CallsGraph interface~caf_co_sum caf_co_sum proc~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum proc~get_c_ptr get_c_ptr proc~caf_co_sum->proc~get_c_ptr interface~caf_c_co_sum caf_c_co_sum proc~caf_co_sum->interface~caf_c_co_sum proc~optional_value optional_value proc~caf_co_sum->proc~optional_value proc~get_c_ptr_character get_c_ptr_character proc~caf_co_sum->proc~get_c_ptr_character Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_co_sum(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"interface/caf_co_sum.html"},{"title":"caf_c_caffeinate – Caffeine","text":"interface Called by interface~~caf_c_caffeinate~~CalledByGraph interface~caf_c_caffeinate caf_c_caffeinate proc~caf_caffeinate caf_caffeinate proc~caf_caffeinate->interface~caf_c_caffeinate interface~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_caffeinate(argc, argv) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: argc type(c_ptr) :: argv (*) Description void c_caffeinate(int argc, char *argv[]);","tags":"","loc":"interface/caf_c_caffeinate.html"},{"title":"caf_c_co_broadcast – Caffeine","text":"interface Called by interface~~caf_c_co_broadcast~~CalledByGraph interface~caf_c_co_broadcast caf_c_co_broadcast proc~caf_co_broadcast caf_co_broadcast proc~caf_co_broadcast->interface~caf_c_co_broadcast interface~caf_co_broadcast caf_co_broadcast interface~caf_co_broadcast->proc~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_co_broadcast(a, source_image, stat, nelem) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image type(c_ptr), value :: stat integer(kind=c_int), value :: nelem Description void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements);","tags":"","loc":"interface/caf_c_co_broadcast.html"},{"title":"caf_c_co_max – Caffeine","text":"interface Called by interface~~caf_c_co_max~~CalledByGraph interface~caf_c_co_max caf_c_co_max proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_c_co_max interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_co_max(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_max(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_c_co_max.html"},{"title":"caf_c_co_min – Caffeine","text":"interface Called by interface~~caf_c_co_min~~CalledByGraph interface~caf_c_co_min caf_c_co_min proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_c_co_min interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_co_min(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_min(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_c_co_min.html"},{"title":"caf_c_co_reduce – Caffeine","text":"interface Called by interface~~caf_c_co_reduce~~CalledByGraph interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce interface~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_co_reduce proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_co_reduce(a, result_image, c_loc_stat, c_loc_errmsg, num_elements, coll_reducesub, client_data) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data Description void caf_c_co_reduce(CFI_cdesc_t a_desc, int result_image, int stat, char errmsg, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data)","tags":"","loc":"interface/caf_c_co_reduce.html"},{"title":"caf_c_co_sum – Caffeine","text":"interface Called by interface~~caf_c_co_sum~~CalledByGraph interface~caf_c_co_sum caf_c_co_sum proc~caf_co_sum caf_co_sum proc~caf_co_sum->interface~caf_c_co_sum interface~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_co_sum(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_sum(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_c_co_sum.html"},{"title":"caf_c_decaffeinate – Caffeine","text":"interface Called by interface~~caf_c_decaffeinate~~CalledByGraph interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_stop_character caf_stop_character proc~caf_stop_character->interface~caf_c_decaffeinate proc~caf_stop_character~2 caf_stop_character proc~caf_stop_character~2->interface~caf_c_decaffeinate proc~caf_error_stop_integer caf_error_stop_integer proc~caf_error_stop_integer->interface~caf_c_decaffeinate proc~caf_stop_integer caf_stop_integer proc~caf_stop_integer->interface~caf_c_decaffeinate proc~caf_stop_integer~2 caf_stop_integer proc~caf_stop_integer~2->interface~caf_c_decaffeinate proc~caf_decaffeinate caf_decaffeinate proc~caf_decaffeinate->interface~caf_c_decaffeinate interface~caf_decaffeinate caf_decaffeinate interface~caf_decaffeinate->proc~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_decaffeinate(exit_code) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code Description void c_decaffeinate();","tags":"","loc":"interface/caf_c_decaffeinate.html"},{"title":"caf_c_elem_len – Caffeine","text":"interface Called by interface~~caf_c_elem_len~~CalledByGraph interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->interface~caf_c_elem_len interface~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_co_reduce proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_elem_len(a) result(a_elem_len) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target Description size_t caf_c_elem_len(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_c_elem_len.html"},{"title":"caf_c_is_f_string – Caffeine","text":"interface Called by interface~~caf_c_is_f_string~~CalledByGraph interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_c_is_f_string interface~caf_co_reduce caf_co_reduce proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->interface~caf_c_is_f_string proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_c_is_f_string proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max interface~caf_co_reduce->proc~caf_co_reduce Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_is_f_string(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_c_is_f_string(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_c_is_f_string.html"},{"title":"caf_c_num_images – Caffeine","text":"interface Called by interface~~caf_c_num_images~~CalledByGraph interface~caf_c_num_images caf_c_num_images proc~num_images_team num_images_team proc~num_images_team->interface~caf_c_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_num_images() bind(c) Arguments None Return Value integer(kind=c_int) Description int caf_c_num_images();","tags":"","loc":"interface/caf_c_num_images.html"},{"title":"caf_c_numeric_type – Caffeine","text":"interface Called by interface~~caf_c_numeric_type~~CalledByGraph interface~caf_c_numeric_type caf_c_numeric_type proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_c_numeric_type proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_c_numeric_type interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_numeric_type(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_c_numeric_type(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_c_numeric_type.html"},{"title":"caf_c_same_cfi_type – Caffeine","text":"interface Called by interface~~caf_c_same_cfi_type~~CalledByGraph interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_co_reduce proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_same_cfi_type(a, b) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) Description bool caf_c_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc);","tags":"","loc":"interface/caf_c_same_cfi_type.html"},{"title":"caf_c_sync_all – Caffeine","text":"interface Called by interface~~caf_c_sync_all~~CalledByGraph interface~caf_c_sync_all caf_c_sync_all proc~caf_sync_all caf_sync_all proc~caf_sync_all->interface~caf_c_sync_all interface~caf_sync_all caf_sync_all interface~caf_sync_all->proc~caf_sync_all proc~caf_caffeinate caf_caffeinate proc~caf_caffeinate->interface~caf_sync_all interface~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_c_sync_all() bind(c) Arguments None Description void caf_c_sync_all();","tags":"","loc":"interface/caf_c_sync_all.html"},{"title":"caf_c_this_image – Caffeine","text":"interface Called by interface~~caf_c_this_image~~CalledByGraph interface~caf_c_this_image caf_c_this_image proc~this_image_team this_image_team proc~this_image_team->interface~caf_c_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_c_this_image() bind(c) Arguments None Return Value integer(kind=c_int) Description int caf_c_this_image();","tags":"","loc":"interface/caf_c_this_image.html"},{"title":"caf_stop – Caffeine","text":"public interface caf_stop Contents Subroutines caf_stop_character caf_stop_integer Subroutines private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"interface/caf_stop.html"},{"title":"caf_sync_all – Caffeine","text":"interface Calls interface~~caf_sync_all~~CallsGraph interface~caf_sync_all caf_sync_all proc~caf_sync_all caf_sync_all interface~caf_sync_all->proc~caf_sync_all interface~caf_c_sync_all caf_c_sync_all proc~caf_sync_all->interface~caf_c_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~caf_sync_all~~CalledByGraph interface~caf_sync_all caf_sync_all proc~caf_caffeinate caf_caffeinate proc~caf_caffeinate->interface~caf_sync_all interface~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_sync_all() Implementation → Arguments None","tags":"","loc":"interface/caf_sync_all.html"},{"title":"caf_num_images – Caffeine","text":"public interface caf_num_images Contents Functions num_images_team num_images_team_number Functions private module function num_images_team(team) result(image_count) Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), optional :: team Return Value integer private module function num_images_team_number(team_number) result(image_count) Arguments Type Intent Optional Attributes Name integer, intent(in) :: team_number Return Value integer","tags":"","loc":"interface/caf_num_images.html"},{"title":"caf_this_image – Caffeine","text":"public interface caf_this_image Contents Functions this_image_coarray_dim_team this_image_coarray_team this_image_team Functions private module function this_image_coarray_dim_team(coarray, dim, team) result(image_number) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: coarray (..) integer, intent(in) :: dim type( team_type ), intent(in), optional :: team Return Value integer private module function this_image_coarray_team(coarray, team) result(image_number) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: coarray (..) type( team_type ), intent(in), optional :: team Return Value integer private module function this_image_team(team) result(image_number) Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), optional :: team Return Value integer","tags":"","loc":"interface/caf_this_image.html"},{"title":"caf_change_team – Caffeine","text":"interface Calls interface~~caf_change_team~~CallsGraph interface~caf_change_team caf_change_team proc~caf_change_team caf_change_team interface~caf_change_team->proc~caf_change_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_change_team(team) Implementation → Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), target :: team","tags":"","loc":"interface/caf_change_team.html"},{"title":"caf_end_team – Caffeine","text":"interface Calls interface~~caf_end_team~~CallsGraph interface~caf_end_team caf_end_team proc~caf_end_team caf_end_team interface~caf_end_team->proc~caf_end_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_end_team() Implementation → Arguments None","tags":"","loc":"interface/caf_end_team.html"},{"title":"caf_form_team – Caffeine","text":"interface Calls interface~~caf_form_team~~CallsGraph interface~caf_form_team caf_form_team proc~caf_form_team caf_form_team interface~caf_form_team->proc~caf_form_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine caf_form_team(num, team, new_index, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: num type( team_type ), intent(out) :: team integer, intent(in), optional :: new_index integer, intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg","tags":"","loc":"interface/caf_form_team.html"},{"title":"caf_error_stop – Caffeine","text":"public interface caf_error_stop Contents Subroutines caf_error_stop_character caf_error_stop_integer Subroutines private module subroutine caf_error_stop_character(stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_error_stop_integer(stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"interface/caf_error_stop.html"},{"title":"caf_stop – Caffeine","text":"public interface caf_stop Contents Subroutines caf_stop_character caf_stop_integer Subroutines private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"interface/caf_stop~2.html"},{"title":"get_c_ptr – Caffeine","text":"public pure function get_c_ptr(stat) result(ptr) Arguments Type Intent Optional Attributes Name integer, intent(in), optional target :: stat Return Value type(c_ptr) Called by proc~~get_c_ptr~~CalledByGraph proc~get_c_ptr get_c_ptr proc~caf_co_broadcast caf_co_broadcast proc~caf_co_broadcast->proc~get_c_ptr proc~caf_co_min caf_co_min proc~caf_co_min->proc~get_c_ptr interface~caf_co_reduce caf_co_reduce proc~caf_co_min->interface~caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->proc~get_c_ptr proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr proc~caf_co_sum caf_co_sum proc~caf_co_sum->proc~get_c_ptr interface~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum interface~caf_co_broadcast caf_co_broadcast interface~caf_co_broadcast->proc~caf_co_broadcast interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_reduce->proc~caf_co_reduce Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/get_c_ptr.html"},{"title":"get_c_ptr_character – Caffeine","text":"public pure function get_c_ptr_character(errmsg) result(ptr) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional target :: errmsg Return Value type(c_ptr) Called by proc~~get_c_ptr_character~~CalledByGraph proc~get_c_ptr_character get_c_ptr_character proc~caf_co_sum caf_co_sum proc~caf_co_sum->proc~get_c_ptr_character proc~caf_co_max caf_co_max proc~caf_co_max->proc~get_c_ptr_character interface~caf_co_reduce caf_co_reduce proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr_character proc~caf_co_min caf_co_min proc~caf_co_min->proc~get_c_ptr_character proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max interface~caf_co_reduce->proc~caf_co_reduce Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/get_c_ptr_character.html"},{"title":"optional_value – Caffeine","text":"public pure function optional_value(var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int) Called by proc~~optional_value~~CalledByGraph proc~optional_value optional_value proc~caf_co_sum caf_co_sum proc~caf_co_sum->proc~optional_value proc~caf_co_max caf_co_max proc~caf_co_max->proc~optional_value interface~caf_co_reduce caf_co_reduce proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce proc~caf_co_reduce->proc~optional_value proc~caf_co_min caf_co_min proc~caf_co_min->proc~optional_value proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max interface~caf_co_reduce->proc~caf_co_reduce Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/optional_value.html"},{"title":"caf_sync_all – Caffeine","text":"module procedure caf_sync_all module module subroutine caf_sync_all() Interface → Arguments None Calls proc~~caf_sync_all~~CallsGraph proc~caf_sync_all caf_sync_all interface~caf_c_sync_all caf_c_sync_all proc~caf_sync_all->interface~caf_c_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_sync_all~~CalledByGraph proc~caf_sync_all caf_sync_all interface~caf_sync_all caf_sync_all interface~caf_sync_all->proc~caf_sync_all proc~caf_caffeinate caf_caffeinate proc~caf_caffeinate->interface~caf_sync_all interface~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_sync_all.html"},{"title":"caf_change_team – Caffeine","text":"module procedure caf_change_team module module subroutine caf_change_team(team) Interface → Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), target :: team Called by proc~~caf_change_team~~CalledByGraph proc~caf_change_team caf_change_team interface~caf_change_team caf_change_team interface~caf_change_team->proc~caf_change_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_change_team.html"},{"title":"caf_end_team – Caffeine","text":"module procedure caf_end_team module module subroutine caf_end_team() Interface → Arguments None Called by proc~~caf_end_team~~CalledByGraph proc~caf_end_team caf_end_team interface~caf_end_team caf_end_team interface~caf_end_team->proc~caf_end_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_end_team.html"},{"title":"caf_form_team – Caffeine","text":"module procedure caf_form_team module module subroutine caf_form_team(num, team, new_index, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name integer, intent(in) :: num type( team_type ), intent(out) :: team integer, intent(in), optional :: new_index integer, intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg Called by proc~~caf_form_team~~CalledByGraph proc~caf_form_team caf_form_team interface~caf_form_team caf_form_team interface~caf_form_team->proc~caf_form_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_form_team.html"},{"title":"caf_error_stop_character – Caffeine","text":"module procedure caf_error_stop_character module procedure caf_error_stop_character() Arguments None Contents Variables error_occured Variables Type Visibility Attributes Name Initial integer(kind=c_int), private, parameter :: error_occured = 1","tags":"","loc":"proc/caf_error_stop_character.html"},{"title":"caf_error_stop_integer – Caffeine","text":"module procedure caf_error_stop_integer module procedure caf_error_stop_integer() Arguments None Calls proc~~caf_error_stop_integer~~CallsGraph proc~caf_error_stop_integer caf_error_stop_integer interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_error_stop_integer->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables exit_code Variables Type Visibility Attributes Name Initial integer, private :: exit_code","tags":"","loc":"proc/caf_error_stop_integer.html"},{"title":"caf_stop_character – Caffeine","text":"module procedure caf_stop_character module procedure caf_stop_character() Arguments None Calls proc~~caf_stop_character~~CallsGraph proc~caf_stop_character caf_stop_character interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_stop_character->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_stop_character.html"},{"title":"caf_stop_integer – Caffeine","text":"module procedure caf_stop_integer module procedure caf_stop_integer() Arguments None Calls proc~~caf_stop_integer~~CallsGraph proc~caf_stop_integer caf_stop_integer interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_stop_integer->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_stop_integer.html"},{"title":"caf_caffeinate – Caffeine","text":"module procedure caf_caffeinate module module function caf_caffeinate() result(exit_code) Interface → Arguments None Return Value integer Calls proc~~caf_caffeinate~~CallsGraph proc~caf_caffeinate caf_caffeinate interface~caf_c_caffeinate caf_c_caffeinate proc~caf_caffeinate->interface~caf_c_caffeinate interface~caf_sync_all caf_sync_all proc~caf_caffeinate->interface~caf_sync_all proc~caf_sync_all caf_sync_all interface~caf_sync_all->proc~caf_sync_all interface~caf_c_sync_all caf_c_sync_all proc~caf_sync_all->interface~caf_c_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_caffeinate~~CalledByGraph proc~caf_caffeinate caf_caffeinate interface~caf_caffeinate caf_caffeinate interface~caf_caffeinate->proc~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables i max_arg_len Functions c_interop_arg Variables Type Visibility Attributes Name Initial integer, private :: i integer, private, parameter :: max_arg_len = 1024 Functions function c_interop_arg(argnum) result(arg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: argnum Return Value character(kind=c_char,len=max_arg_len),pointer","tags":"","loc":"proc/caf_caffeinate.html"},{"title":"caf_decaffeinate – Caffeine","text":"module procedure caf_decaffeinate module module subroutine caf_decaffeinate(exit_code) Interface → Arguments Type Intent Optional Attributes Name integer, intent(in) :: exit_code Calls proc~~caf_decaffeinate~~CallsGraph proc~caf_decaffeinate caf_decaffeinate interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_decaffeinate->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_decaffeinate~~CalledByGraph proc~caf_decaffeinate caf_decaffeinate interface~caf_decaffeinate caf_decaffeinate interface~caf_decaffeinate->proc~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_decaffeinate.html"},{"title":"num_images_team – Caffeine","text":"module procedure num_images_team module procedure num_images_team() Arguments None Calls proc~~num_images_team~~CallsGraph proc~num_images_team num_images_team interface~caf_c_num_images caf_c_num_images proc~num_images_team->interface~caf_c_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/num_images_team.html"},{"title":"num_images_team_number – Caffeine","text":"module procedure num_images_team_number module procedure num_images_team_number() Arguments None Contents None","tags":"","loc":"proc/num_images_team_number.html"},{"title":"this_image_coarray_dim_team – Caffeine","text":"module procedure this_image_coarray_dim_team module procedure this_image_coarray_dim_team() Arguments None Contents None","tags":"","loc":"proc/this_image_coarray_dim_team.html"},{"title":"this_image_coarray_team – Caffeine","text":"module procedure this_image_coarray_team module procedure this_image_coarray_team() Arguments None Contents None","tags":"","loc":"proc/this_image_coarray_team.html"},{"title":"this_image_team – Caffeine","text":"module procedure this_image_team module procedure this_image_team() Arguments None Calls proc~~this_image_team~~CallsGraph proc~this_image_team this_image_team interface~caf_c_this_image caf_c_this_image proc~this_image_team->interface~caf_c_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/this_image_team.html"},{"title":"caf_stop_character – Caffeine","text":"module procedure caf_stop_character module procedure caf_stop_character() Arguments None Calls proc~~caf_stop_character~2~~CallsGraph proc~caf_stop_character~2 caf_stop_character interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_stop_character~2->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_stop_character~2.html"},{"title":"caf_stop_integer – Caffeine","text":"module procedure caf_stop_integer module procedure caf_stop_integer() Arguments None Calls proc~~caf_stop_integer~2~~CallsGraph proc~caf_stop_integer~2 caf_stop_integer interface~caf_c_decaffeinate caf_c_decaffeinate proc~caf_stop_integer~2->interface~caf_c_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/caf_stop_integer~2.html"},{"title":"caf_co_sum – Caffeine","text":"module procedure caf_co_sum module module subroutine caf_co_sum(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Calls proc~~caf_co_sum~~CallsGraph proc~caf_co_sum caf_co_sum proc~get_c_ptr get_c_ptr proc~caf_co_sum->proc~get_c_ptr interface~caf_c_co_sum caf_c_co_sum proc~caf_co_sum->interface~caf_c_co_sum proc~optional_value optional_value proc~caf_co_sum->proc~optional_value proc~get_c_ptr_character get_c_ptr_character proc~caf_co_sum->proc~get_c_ptr_character Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_co_sum~~CalledByGraph proc~caf_co_sum caf_co_sum interface~caf_co_sum caf_co_sum interface~caf_co_sum->proc~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables c_string errmsg_c_ptr errmsg_f_ptr stat_c_ptr Variables Type Visibility Attributes Name Initial character(len=:), private, allocatable :: c_string type(c_ptr), private :: errmsg_c_ptr character(len=:), private, pointer :: errmsg_f_ptr type(c_ptr), private :: stat_c_ptr","tags":"","loc":"proc/caf_co_sum.html"},{"title":"caf_co_max – Caffeine","text":"module procedure caf_co_max module module subroutine caf_co_max(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Calls proc~~caf_co_max~~CallsGraph proc~caf_co_max caf_co_max proc~get_c_ptr get_c_ptr proc~caf_co_max->proc~get_c_ptr interface~caf_c_numeric_type caf_c_numeric_type proc~caf_co_max->interface~caf_c_numeric_type proc~optional_value optional_value proc~caf_co_max->proc~optional_value interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_max->interface~caf_c_is_f_string interface~caf_c_co_max caf_c_co_max proc~caf_co_max->interface~caf_c_co_max proc~get_c_ptr_character get_c_ptr_character proc~caf_co_max->proc~get_c_ptr_character interface~caf_co_reduce caf_co_reduce proc~caf_co_max->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr proc~caf_co_reduce->proc~optional_value proc~caf_co_reduce->interface~caf_c_is_f_string proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_co_max~~CalledByGraph proc~caf_co_max caf_co_max interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables c_string errmsg_c_ptr errmsg_f_ptr stat_c_ptr Functions reverse_alphabetize Variables Type Visibility Attributes Name Initial character(len=:), private, allocatable :: c_string type(c_ptr), private :: errmsg_c_ptr = c_null_ptr character(len=:), private, pointer :: errmsg_f_ptr type(c_ptr), private :: stat_c_ptr = c_null_ptr Functions pure function reverse_alphabetize(lhs, rhs) result(last_alphabetically) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value character(len=:),allocatable","tags":"","loc":"proc/caf_co_max.html"},{"title":"caf_co_reduce – Caffeine","text":"module procedure caf_co_reduce module module subroutine caf_co_reduce(a, operation, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Calls proc~~caf_co_reduce~~CallsGraph proc~caf_co_reduce caf_co_reduce proc~get_c_ptr get_c_ptr proc~caf_co_reduce->proc~get_c_ptr interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert proc~optional_value optional_value proc~caf_co_reduce->proc~optional_value interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_reduce->interface~caf_c_is_f_string proc~get_c_ptr_character get_c_ptr_character proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_co_reduce~~CalledByGraph proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_max caf_co_max proc~caf_co_max->interface~caf_co_reduce proc~caf_co_min caf_co_min proc~caf_co_min->interface~caf_co_reduce interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min interface~caf_co_max caf_co_max interface~caf_co_max->proc~caf_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables bool_op char_op double_complex_op double_op errmsg_ptr float_complex_op float_op int32_op int64_op stat_ptr Subroutines coll_reducesub_c_bool coll_reducesub_c_char coll_reducesub_c_double coll_reducesub_c_double_complex coll_reducesub_c_float coll_reducesub_c_float_complex coll_reducesub_c_int32_t coll_reducesub_c_int64_t Variables Type Visibility Attributes Name Initial procedure( c_bool_operation ), private, pointer :: bool_op => null() procedure( c_char_operation ), private, pointer :: char_op => null() procedure( c_double_complex_operation ), private, pointer :: double_complex_op => null() procedure( c_double_operation ), private, pointer :: double_op => null() type(c_ptr), private :: errmsg_ptr = c_null_ptr procedure( c_float_complex_operation ), private, pointer :: float_complex_op => null() procedure( c_float_operation ), private, pointer :: float_op => null() procedure( c_int32_t_operation ), private, pointer :: int32_op => null() procedure( c_int64_t_operation ), private, pointer :: int64_op => null() type(c_ptr), private :: stat_ptr = c_null_ptr Subroutines subroutine coll_reducesub_c_bool(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_char(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_double(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_double_complex(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_float(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_float_complex(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_int32_t(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data subroutine coll_reducesub_c_int64_t(arg1, arg2_and_out, count, cdata) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: arg1 \"Left\" operands type(c_ptr), value :: arg2_and_out \"Right\" operands and result integer(kind=c_size_t), value :: count Operand count type(c_ptr), value :: cdata Client data","tags":"","loc":"proc/caf_co_reduce.html"},{"title":"caf_co_broadcast – Caffeine","text":"module procedure caf_co_broadcast module module subroutine caf_co_broadcast(a, source_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional :: source_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Calls proc~~caf_co_broadcast~~CallsGraph proc~caf_co_broadcast caf_co_broadcast proc~get_c_ptr get_c_ptr proc~caf_co_broadcast->proc~get_c_ptr interface~caf_c_co_broadcast caf_c_co_broadcast proc~caf_co_broadcast->interface~caf_c_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_co_broadcast~~CalledByGraph proc~caf_co_broadcast caf_co_broadcast interface~caf_co_broadcast caf_co_broadcast interface~caf_co_broadcast->proc~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables stat_ptr Variables Type Visibility Attributes Name Initial type(c_ptr), private :: stat_ptr","tags":"","loc":"proc/caf_co_broadcast.html"},{"title":"caf_co_min – Caffeine","text":"module procedure caf_co_min module module subroutine caf_co_min(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Calls proc~~caf_co_min~~CallsGraph proc~caf_co_min caf_co_min proc~get_c_ptr get_c_ptr proc~caf_co_min->proc~get_c_ptr interface~caf_c_numeric_type caf_c_numeric_type proc~caf_co_min->interface~caf_c_numeric_type proc~optional_value optional_value proc~caf_co_min->proc~optional_value interface~caf_c_is_f_string caf_c_is_f_string proc~caf_co_min->interface~caf_c_is_f_string interface~caf_c_co_min caf_c_co_min proc~caf_co_min->interface~caf_c_co_min proc~get_c_ptr_character get_c_ptr_character proc~caf_co_min->proc~get_c_ptr_character interface~caf_co_reduce caf_co_reduce proc~caf_co_min->interface~caf_co_reduce proc~caf_co_reduce caf_co_reduce interface~caf_co_reduce->proc~caf_co_reduce proc~caf_co_reduce->proc~get_c_ptr proc~caf_co_reduce->proc~optional_value proc~caf_co_reduce->interface~caf_c_is_f_string proc~caf_co_reduce->proc~get_c_ptr_character interface~caf_c_elem_len caf_c_elem_len proc~caf_co_reduce->interface~caf_c_elem_len interface~caf_c_same_cfi_type caf_c_same_cfi_type proc~caf_co_reduce->interface~caf_c_same_cfi_type interface~caf_c_co_reduce caf_c_co_reduce proc~caf_co_reduce->interface~caf_c_co_reduce assert assert proc~caf_co_reduce->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~caf_co_min~~CalledByGraph proc~caf_co_min caf_co_min interface~caf_co_min caf_co_min interface~caf_co_min->proc~caf_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables c_string errmsg_c_ptr errmsg_f_ptr stat_c_ptr Functions alphabetize Variables Type Visibility Attributes Name Initial character(len=:), private, allocatable :: c_string type(c_ptr), private :: errmsg_c_ptr = c_null_ptr character(len=:), private, pointer :: errmsg_f_ptr type(c_ptr), private :: stat_c_ptr = c_null_ptr Functions pure function alphabetize(lhs, rhs) result(first_alphabetically) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value character(len=:),allocatable","tags":"","loc":"proc/caf_co_min.html"},{"title":"caffeine_m – Caffeine","text":"Uses program_termination_m collective_subroutines_m team_type_m synchronization_m image_enumeration_m caffeinate_decaffeinate_m module~~caffeine_m~~UsesGraph module~caffeine_m caffeine_m module~image_enumeration_m image_enumeration_m module~caffeine_m->module~image_enumeration_m module~program_termination_m program_termination_m module~caffeine_m->module~program_termination_m module~caffeinate_decaffeinate_m caffeinate_decaffeinate_m module~caffeine_m->module~caffeinate_decaffeinate_m module~synchronization_m synchronization_m module~caffeine_m->module~synchronization_m module~collective_subroutines_m collective_subroutines_m module~caffeine_m->module~collective_subroutines_m module~team_type_m team_type_m module~caffeine_m->module~team_type_m module~image_enumeration_m->module~team_type_m module~caffeinate_decaffeinate_m->module~team_type_m iso_c_binding iso_c_binding module~collective_subroutines_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/caffeine_m.html"},{"title":"caffeinate_decaffeinate_m – Caffeine","text":"Uses team_type_m module~~caffeinate_decaffeinate_m~~UsesGraph module~caffeinate_decaffeinate_m caffeinate_decaffeinate_m module~team_type_m team_type_m module~caffeinate_decaffeinate_m->module~team_type_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: caffeinate_decaffeinate_s module~~caffeinate_decaffeinate_m~~UsedByGraph module~caffeinate_decaffeinate_m caffeinate_decaffeinate_m module~caffeinate_decaffeinate_s caffeinate_decaffeinate_s module~caffeinate_decaffeinate_s->module~caffeinate_decaffeinate_m module~caffeine_m caffeine_m module~caffeine_m->module~caffeinate_decaffeinate_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables default_team Interfaces caf_caffeinate caf_decaffeinate Variables Type Visibility Attributes Name Initial type( team_type ), public, target :: default_team Interfaces interface public module module function caf_caffeinate() result(exit_code) Implementation → Arguments None Return Value integer interface public module module subroutine caf_decaffeinate(exit_code) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: exit_code","tags":"","loc":"module/caffeinate_decaffeinate_m.html"},{"title":"collective_subroutines_m – Caffeine","text":"Uses iso_c_binding module~~collective_subroutines_m~~UsesGraph module~collective_subroutines_m collective_subroutines_m iso_c_binding iso_c_binding module~collective_subroutines_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: co_broadcast_s co_max_s co_min_s co_reduce_s co_sum_s module~~collective_subroutines_m~~UsedByGraph module~collective_subroutines_m collective_subroutines_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~collective_subroutines_m module~co_max_s co_max_s module~co_max_s->module~collective_subroutines_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~collective_subroutines_m module~co_min_s co_min_s module~co_min_s->module~collective_subroutines_m module~caffeine_m caffeine_m module~caffeine_m->module~collective_subroutines_m module~co_sum_s co_sum_s module~co_sum_s->module~collective_subroutines_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_co_broadcast caf_co_max caf_co_min caf_co_reduce caf_co_sum Abstract Interfaces c_bool_operation c_char_operation c_double_complex_operation c_double_operation c_float_complex_operation c_float_operation c_int32_t_operation c_int64_t_operation Interfaces interface public module module subroutine caf_co_broadcast(a, source_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional :: source_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg interface public module module subroutine caf_co_max(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg interface public module module subroutine caf_co_min(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg interface public module module subroutine caf_co_reduce(a, operation, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg interface public module module subroutine caf_co_sum(a, result_image, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg Abstract Interfaces abstract interface public pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool) abstract interface public pure function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable abstract interface public pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double) abstract interface public pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double) abstract interface public pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float) abstract interface public pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float) abstract interface public pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t) abstract interface public pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t)","tags":"","loc":"module/collective_subroutines_m.html"},{"title":"caffeine_h_m – Caffeine","text":"Uses iso_c_binding module~~caffeine_h_m~~UsesGraph module~caffeine_h_m caffeine_h_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~caffeine_h_m~~UsedByGraph module~caffeine_h_m caffeine_h_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~caffeine_h_m module~co_max_s co_max_s module~co_max_s->module~caffeine_h_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~caffeine_h_m module~image_enumeration_s image_enumeration_s module~image_enumeration_s->module~caffeine_h_m module~caffeinate_decaffeinate_s caffeinate_decaffeinate_s module~caffeinate_decaffeinate_s->module~caffeine_h_m module~sychronization_s sychronization_s module~sychronization_s->module~caffeine_h_m module~co_min_s co_min_s module~co_min_s->module~caffeine_h_m module~co_sum_s co_sum_s module~co_sum_s->module~caffeine_h_m module~program_termination_s program_termination_s module~program_termination_s->module~caffeine_h_m module~normal_termination_s normal_termination_s module~normal_termination_s->module~caffeine_h_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_c_caffeinate caf_c_co_broadcast caf_c_co_max caf_c_co_min caf_c_co_reduce caf_c_co_sum caf_c_decaffeinate caf_c_elem_len caf_c_is_f_string caf_c_num_images caf_c_numeric_type caf_c_same_cfi_type caf_c_sync_all caf_c_this_image Interfaces interface public subroutine caf_c_caffeinate(argc, argv) bind(c) void c_caffeinate(int argc, char *argv[]); Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: argc type(c_ptr) :: argv (*) interface public subroutine caf_c_co_broadcast(a, source_image, stat, nelem) bind(c) void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image type(c_ptr), value :: stat integer(kind=c_int), value :: nelem interface public subroutine caf_c_co_max(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_max(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_c_co_min(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_min(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_c_co_reduce(a, result_image, c_loc_stat, c_loc_errmsg, num_elements, coll_reducesub, client_data) bind(c) void caf_c_co_reduce(CFI_cdesc_t a_desc, int result_image, int stat, char errmsg, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data interface public subroutine caf_c_co_sum(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_sum(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_c_decaffeinate(exit_code) bind(c) void c_decaffeinate(); Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code interface public pure function caf_c_elem_len(a) result(a_elem_len) bind(c) size_t caf_c_elem_len(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target interface public pure function caf_c_is_f_string(a) bind(c) bool caf_c_is_f_string(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface public pure function caf_c_num_images() bind(c) int caf_c_num_images(); Arguments None Return Value integer(kind=c_int) interface public pure function caf_c_numeric_type(a) bind(c) bool caf_c_numeric_type(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface public pure function caf_c_same_cfi_type(a, b) bind(c) bool caf_c_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) interface public subroutine caf_c_sync_all() bind(c) void caf_c_sync_all(); Arguments None interface public pure function caf_c_this_image() bind(c) int caf_c_this_image(); Arguments None Return Value integer(kind=c_int)","tags":"","loc":"module/caffeine_h_m.html"},{"title":"normal_termination_m – Caffeine","text":"Used by Descendants: normal_termination_s module~~normal_termination_m~~UsedByGraph module~normal_termination_m normal_termination_m module~normal_termination_s normal_termination_s module~normal_termination_s->module~normal_termination_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_stop Interfaces public interface caf_stop private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"module/normal_termination_m.html"},{"title":"synchronization_m – Caffeine","text":"Used by Descendants: sychronization_s module~~synchronization_m~~UsedByGraph module~synchronization_m synchronization_m module~caffeinate_decaffeinate_s caffeinate_decaffeinate_s module~caffeinate_decaffeinate_s->module~synchronization_m module~sychronization_s sychronization_s module~sychronization_s->module~synchronization_m module~caffeine_m caffeine_m module~caffeine_m->module~synchronization_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_sync_all Interfaces interface public module module subroutine caf_sync_all() Implementation → Arguments None","tags":"","loc":"module/synchronization_m.html"},{"title":"image_enumeration_m – Caffeine","text":"Uses team_type_m module~~image_enumeration_m~~UsesGraph module~image_enumeration_m image_enumeration_m module~team_type_m team_type_m module~image_enumeration_m->module~team_type_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: image_enumeration_s module~~image_enumeration_m~~UsedByGraph module~image_enumeration_m image_enumeration_m module~image_enumeration_s image_enumeration_s module~image_enumeration_s->module~image_enumeration_m module~caffeine_m caffeine_m module~caffeine_m->module~image_enumeration_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_num_images caf_this_image Interfaces public interface caf_num_images private module function num_images_team(team) result(image_count) Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), optional :: team Return Value integer private module function num_images_team_number(team_number) result(image_count) Arguments Type Intent Optional Attributes Name integer, intent(in) :: team_number Return Value integer public interface caf_this_image private module function this_image_coarray_dim_team(coarray, dim, team) result(image_number) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: coarray (..) integer, intent(in) :: dim type( team_type ), intent(in), optional :: team Return Value integer private module function this_image_coarray_team(coarray, team) result(image_number) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: coarray (..) type( team_type ), intent(in), optional :: team Return Value integer private module function this_image_team(team) result(image_number) Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), optional :: team Return Value integer","tags":"","loc":"module/image_enumeration_m.html"},{"title":"team_type_m – Caffeine","text":"Used by Descendants: team_type_s module~~team_type_m~~UsedByGraph module~team_type_m team_type_m module~image_enumeration_m image_enumeration_m module~image_enumeration_m->module~team_type_m module~caffeinate_decaffeinate_m caffeinate_decaffeinate_m module~caffeinate_decaffeinate_m->module~team_type_m module~team_type_s team_type_s module~team_type_s->module~team_type_m module~caffeine_m caffeine_m module~caffeine_m->module~team_type_m module~caffeine_m->module~image_enumeration_m module~caffeine_m->module~caffeinate_decaffeinate_m module~caffeinate_decaffeinate_s caffeinate_decaffeinate_s module~caffeinate_decaffeinate_s->module~caffeinate_decaffeinate_m module~image_enumeration_s image_enumeration_s module~image_enumeration_s->module~image_enumeration_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables current_team Interfaces caf_change_team caf_end_team caf_form_team Derived Types team_type Variables Type Visibility Attributes Name Initial type( team_type ), public, pointer :: current_team => null() Interfaces interface public module module subroutine caf_change_team(team) Implementation → Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), target :: team interface public module module subroutine caf_end_team() Implementation → Arguments None interface public module module subroutine caf_form_team(num, team, new_index, stat, errmsg) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: num type( team_type ), intent(out) :: team integer, intent(in), optional :: new_index integer, intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg Derived Types type, public :: team_type","tags":"","loc":"module/team_type_m.html"},{"title":"program_termination_m – Caffeine","text":"Used by Descendants: program_termination_s module~~program_termination_m~~UsedByGraph module~program_termination_m program_termination_m module~program_termination_s program_termination_s module~program_termination_s->module~program_termination_m module~caffeine_m caffeine_m module~caffeine_m->module~program_termination_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_error_stop caf_stop Interfaces public interface caf_error_stop private module subroutine caf_error_stop_character(stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_error_stop_integer(stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code public interface caf_stop private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"module/program_termination_m.html"},{"title":"utilities_m – Caffeine","text":"Uses iso_c_binding module~~utilities_m~~UsesGraph module~utilities_m utilities_m iso_c_binding iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~utilities_m~~UsedByGraph module~utilities_m utilities_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~utilities_m module~co_max_s co_max_s module~co_max_s->module~utilities_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~utilities_m module~co_min_s co_min_s module~co_min_s->module~utilities_m module~co_sum_s co_sum_s module~co_sum_s->module~utilities_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions get_c_ptr get_c_ptr_character optional_value Functions public pure function get_c_ptr (stat) result(ptr) Arguments Type Intent Optional Attributes Name integer, intent(in), optional target :: stat Return Value type(c_ptr) public pure function get_c_ptr_character (errmsg) result(ptr) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional target :: errmsg Return Value type(c_ptr) public pure function optional_value (var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int)","tags":"","loc":"module/utilities_m.html"},{"title":"sychronization_s – Caffeine","text":"Uses caffeine_h_m Ancestors: synchronization_m module~~sychronization_s~~UsesGraph module~sychronization_s sychronization_s module~caffeine_h_m caffeine_h_m module~sychronization_s->module~caffeine_h_m module~synchronization_m synchronization_m module~sychronization_s->module~synchronization_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_sync_all Module Procedures module procedure caf_sync_all module module subroutine caf_sync_all() Interface → Arguments None","tags":"","loc":"module/sychronization_s.html"},{"title":"team_type_s – Caffeine","text":"Uses Ancestors: team_type_m module~~team_type_s~~UsesGraph module~team_type_s team_type_s module~team_type_m team_type_m module~team_type_s->module~team_type_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_change_team caf_end_team caf_form_team Module Procedures module procedure caf_change_team module module subroutine caf_change_team(team) Interface → Arguments Type Intent Optional Attributes Name type( team_type ), intent(in), target :: team module procedure caf_end_team module module subroutine caf_end_team() Interface → Arguments None module procedure caf_form_team module module subroutine caf_form_team(num, team, new_index, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name integer, intent(in) :: num type( team_type ), intent(out) :: team integer, intent(in), optional :: new_index integer, intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg","tags":"","loc":"module/team_type_s.html"},{"title":"program_termination_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m iso_fortran_env Ancestors: program_termination_m module~~program_termination_s~~UsesGraph module~program_termination_s program_termination_s module~caffeine_h_m caffeine_h_m module~program_termination_s->module~caffeine_h_m module~program_termination_m program_termination_m module~program_termination_s->module~program_termination_m iso_c_binding iso_c_binding module~program_termination_s->iso_c_binding iso_fortran_env iso_fortran_env module~program_termination_s->iso_fortran_env module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_error_stop_character caf_error_stop_integer caf_stop_character caf_stop_integer Module Procedures module procedure caf_error_stop_character module procedure caf_error_stop_character() Arguments None module procedure caf_error_stop_integer module procedure caf_error_stop_integer() Arguments None module procedure caf_stop_character module procedure caf_stop_character() Arguments None module procedure caf_stop_integer module procedure caf_stop_integer() Arguments None","tags":"","loc":"module/program_termination_s.html"},{"title":"caffeinate_decaffeinate_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m synchronization_m Ancestors: caffeinate_decaffeinate_m module~~caffeinate_decaffeinate_s~~UsesGraph module~caffeinate_decaffeinate_s caffeinate_decaffeinate_s module~caffeine_h_m caffeine_h_m module~caffeinate_decaffeinate_s->module~caffeine_h_m module~caffeinate_decaffeinate_m caffeinate_decaffeinate_m module~caffeinate_decaffeinate_s->module~caffeinate_decaffeinate_m module~synchronization_m synchronization_m module~caffeinate_decaffeinate_s->module~synchronization_m iso_c_binding iso_c_binding module~caffeinate_decaffeinate_s->iso_c_binding module~caffeine_h_m->iso_c_binding module~team_type_m team_type_m module~caffeinate_decaffeinate_m->module~team_type_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_caffeinate caf_decaffeinate Module Procedures module procedure caf_caffeinate module module function caf_caffeinate() result(exit_code) Interface → Arguments None Return Value integer module procedure caf_decaffeinate module module subroutine caf_decaffeinate(exit_code) Interface → Arguments Type Intent Optional Attributes Name integer, intent(in) :: exit_code","tags":"","loc":"module/caffeinate_decaffeinate_s.html"},{"title":"image_enumeration_s – Caffeine","text":"Uses caffeine_h_m Ancestors: image_enumeration_m module~~image_enumeration_s~~UsesGraph module~image_enumeration_s image_enumeration_s module~caffeine_h_m caffeine_h_m module~image_enumeration_s->module~caffeine_h_m module~image_enumeration_m image_enumeration_m module~image_enumeration_s->module~image_enumeration_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding module~team_type_m team_type_m module~image_enumeration_m->module~team_type_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures num_images_team num_images_team_number this_image_coarray_dim_team this_image_coarray_team this_image_team Module Procedures module procedure num_images_team module procedure num_images_team() Arguments None module procedure num_images_team_number module procedure num_images_team_number() Arguments None module procedure this_image_coarray_dim_team module procedure this_image_coarray_dim_team() Arguments None module procedure this_image_coarray_team module procedure this_image_coarray_team() Arguments None module procedure this_image_team module procedure this_image_team() Arguments None","tags":"","loc":"module/image_enumeration_s.html"},{"title":"normal_termination_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m iso_fortran_env Ancestors: normal_termination_m module~~normal_termination_s~~UsesGraph module~normal_termination_s normal_termination_s module~caffeine_h_m caffeine_h_m module~normal_termination_s->module~caffeine_h_m module~normal_termination_m normal_termination_m module~normal_termination_s->module~normal_termination_m iso_c_binding iso_c_binding module~normal_termination_s->iso_c_binding iso_fortran_env iso_fortran_env module~normal_termination_s->iso_fortran_env module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_stop_character caf_stop_integer Module Procedures module procedure caf_stop_character module procedure caf_stop_character() Arguments None module procedure caf_stop_integer module procedure caf_stop_integer() Arguments None","tags":"","loc":"module/normal_termination_s.html"},{"title":"co_sum_s – Caffeine","text":"Uses iso_c_binding utilities_m caffeine_h_m Ancestors: collective_subroutines_m module~~co_sum_s~~UsesGraph module~co_sum_s co_sum_s module~caffeine_h_m caffeine_h_m module~co_sum_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_sum_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_sum_s->module~utilities_m iso_c_binding iso_c_binding module~co_sum_s->iso_c_binding module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_co_sum Module Procedures module procedure caf_co_sum module module subroutine caf_co_sum(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"module/co_sum_s.html"},{"title":"co_max_s – Caffeine","text":"Uses iso_c_binding utilities_m assert_m caffeine_h_m Ancestors: collective_subroutines_m module~~co_max_s~~UsesGraph module~co_max_s co_max_s iso_c_binding iso_c_binding module~co_max_s->iso_c_binding assert_m assert_m module~co_max_s->assert_m module~caffeine_h_m caffeine_h_m module~co_max_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_max_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_max_s->module~utilities_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_co_max Module Procedures module procedure caf_co_max module module subroutine caf_co_max(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"module/co_max_s.html"},{"title":"co_reduce_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m assert_m utilities_m intrinsic_array_m Ancestors: collective_subroutines_m module~~co_reduce_s~~UsesGraph module~co_reduce_s co_reduce_s iso_c_binding iso_c_binding module~co_reduce_s->iso_c_binding assert_m assert_m module~co_reduce_s->assert_m module~caffeine_h_m caffeine_h_m module~co_reduce_s->module~caffeine_h_m intrinsic_array_m intrinsic_array_m module~co_reduce_s->intrinsic_array_m module~collective_subroutines_m collective_subroutines_m module~co_reduce_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_reduce_s->module~utilities_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables dummy Module Procedures caf_co_reduce Variables Type Visibility Attributes Name Initial character(kind=c_char,len=5), private, parameter :: dummy = \"     \" Module Procedures module procedure caf_co_reduce module module subroutine caf_co_reduce(a, operation, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"module/co_reduce_s.html"},{"title":"co_broadcast_s – Caffeine","text":"Uses iso_c_binding utilities_m caffeine_h_m Ancestors: collective_subroutines_m module~~co_broadcast_s~~UsesGraph module~co_broadcast_s co_broadcast_s module~caffeine_h_m caffeine_h_m module~co_broadcast_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_broadcast_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_broadcast_s->module~utilities_m iso_c_binding iso_c_binding module~co_broadcast_s->iso_c_binding module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_co_broadcast Module Procedures module procedure caf_co_broadcast module module subroutine caf_co_broadcast(a, source_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional :: source_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"module/co_broadcast_s.html"},{"title":"co_min_s – Caffeine","text":"Uses iso_c_binding utilities_m assert_m caffeine_h_m Ancestors: collective_subroutines_m module~~co_min_s~~UsesGraph module~co_min_s co_min_s iso_c_binding iso_c_binding module~co_min_s->iso_c_binding assert_m assert_m module~co_min_s->assert_m module~caffeine_h_m caffeine_h_m module~co_min_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_min_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_min_s->module~utilities_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures caf_co_min Module Procedures module procedure caf_co_min module module subroutine caf_co_min(a, result_image, stat, errmsg) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer, intent(in), optional target :: result_image integer, intent(out), optional target :: stat character(len=*), intent(inout), optional target :: errmsg","tags":"","loc":"module/co_min_s.html"}]}